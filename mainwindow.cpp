#include "mainwindow.h"
#include "ui_mainwindow.h"
#include <QFile>
#include <QMessageBox>
#include <QFileDialog>

MainWindow::MainWindow(QWidget* parent) : QMainWindow(parent), ui(new Ui::MainWindow) {
    ui->setupUi(this);

    InitData();
    InitUi();
}

MainWindow::~MainWindow() {
    delete ui;
}

void MainWindow::on_btnRect_clicked() {
    m_imageDisplay->DrawRect();
}

void MainWindow::on_btnRotateRect_clicked() {
    m_imageDisplay->DrawRotateRect();
    //    HTuple hv_Row3, hv_Column3, hv_Phi, hv_Length1, hv_Length2;
    //    SetColor(hv_WindowHandle, "green");
    //    DrawRectangle2(hv_WindowHandle, &hv_Row3, &hv_Column3, &hv_Phi, &hv_Length1, &hv_Length2);
    //    DispRectangle2(hv_WindowHandle, hv_Row3, hv_Column3, hv_Phi, hv_Length1, hv_Length2);
}

void MainWindow::on_btnCircle_clicked() {
    m_imageDisplay->DrawCircle();
}

void MainWindow::on_btnEllipse_clicked() {
    m_imageDisplay->DrawEllipse();
}

void MainWindow::on_btnThreshold_clicked() {
    m_imageDisplay->Threshold();
}

void MainWindow::InitData() {
    m_imageDisplay = new ImageDisplay();
    connect(&m_timer, SIGNAL(timeout()), this, SLOT(RunCircle()));
    m_timer.setInterval(300);
}

void MainWindow::InitUi() {
    ui->layOutImage->addWidget(m_imageDisplay);
    this->showMaximized();
}

void MainWindow::on_btnAddPic_clicked() {
    try {
        QString pathName =
            QFileDialog::getOpenFileName(this, tr("action"), "/images/", "Image file(*.bmp *.png *.jpg)", 0);
        if (pathName != "") {
            HalconCpp::HTuple  path = QString2Tuple(pathName);
            HalconCpp::HObject image;
            HalconCpp::ReadImage(&image, path);
            m_imageDisplay->AddImage(image);
        }

    } catch (HalconCpp::HException& e) {
        QMessageBox::information(NULL, tr("Tip"), tr("Select image path error!"), QMessageBox::Yes);
    }
}

HalconCpp::HTuple MainWindow::QString2Tuple(QString str) {
    QByteArray ba   = str.toLatin1();
    char*      data = ba.data();
    return (HalconCpp::HTuple)data;
}

void MainWindow::on_btnBlob_clicked() {
    m_imageDisplay->Blob();
}

void MainWindow::on_btnShowOrigin_clicked() {
    m_imageDisplay->UpdateImage();
}

void MainWindow::on_btnLive_clicked() {
    m_timer.start();
}

void MainWindow::on_btnCheck_clicked() {
    // Local iconic variables
    HalconCpp::HObject ho_Image;

    // Local control variables
    HalconCpp::HTuple hv_AcqHandle;

    // Image Acquisition 01: Code generated by Image Acquisition 01
    HalconCpp::OpenFramegrabber("DirectShow", 1, 1, 0, 0, 0, 0, "default", 8, "rgb", -1, "false",
                                  "default", "[0] Lenovo EasyCamera", 0, -1, &hv_AcqHandle);
    HalconCpp::GrabImageStart(hv_AcqHandle, -1);
    //    while (0 != 1) {
    HalconCpp::GrabImageAsync(&ho_Image, hv_AcqHandle, -1);
    m_imageDisplay->AddImage(ho_Image);
    // Image Acquisition 01: Do something
    //    }
    HalconCpp::CloseFramegrabber(hv_AcqHandle);
}

void MainWindow::on_btnStop_clicked() {
    m_timer.stop();
}

void MainWindow::RunCircle() {
    // Local iconic variables
    HalconCpp::HObject ho_Image;

    // Local control variables
    HalconCpp::HTuple hv_AcqHandle;

    // Image Acquisition 01: Code generated by Image Acquisition 01
    HalconCpp::OpenFramegrabber("DirectShow", 1, 1, 0, 0, 0, 0, "default", 8, "rgb", -1, "false",
                                  "default", "[0] Lenovo EasyCamera", 0, -1, &hv_AcqHandle);
    HalconCpp::GrabImageStart(hv_AcqHandle, -1);
    //    while (0 != 1) {
    HalconCpp::GrabImageAsync(&ho_Image, hv_AcqHandle, -1);
    m_imageDisplay->RunImage(ho_Image);
    // Image Acquisition 01: Do something
    //    }
    HalconCpp::CloseFramegrabber(hv_AcqHandle);
}
